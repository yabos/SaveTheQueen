/*****************************************************************************
 *																			 *
 *								Protocol File								 *
 *																			 *
 *		File	: DB_Item.cs
 *																			 *
 *		Desc	: Generated by Morpheus										 *
 *																			 *
 *****************************************************************************/
//-----------------------------------------------------------------------------
//	Include Files & Define
//-----------------------------------------------------------------------------
using System.Collections.Generic;


namespace table.db {

//-----------------------------------------------------------------------------
//	Enumerations
//-----------------------------------------------------------------------------
[System.Flags]
public enum E_ItemType
{
	Normal,
	Weapon,
	Armor,
}

[System.Flags]
public enum E_ItemKindType
{
	Normal,
	KeyItem,
	Material,
}

[System.Flags]
public enum E_WeaponType
{
	None = 0,
	Free,
	Dagger,
	Sword,
	Dual = 5,
	Spear,
	Bow,
	Cbow,
	Staff,
	Orb = 10,
	Wand,
	Mace,
	Ax,
	Shield,
}

[System.Flags]
public enum E_ArmorType
{
	None,
	Helmet,
	Chest,
	Pants,
	Boots,
	Shoulders,
	Gloves,
	Amulet,
	Ring,
}

//-----------------------------------------------------------------------------
//	Packets
//-----------------------------------------------------------------------------
public class DB_Item
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private string _itemID = string.Empty;
	private string _itemName = string.Empty;
	private string _itemDesc = string.Empty;
	private string _iconName = string.Empty;
	private int _price;
	private string _option = string.Empty;
	private E_ItemType _itemType;
	private E_ItemKindType _itemKindType;
	private bool _isConsume;
	private E_ScopeType _scopeType;
	private E_OccasionType _occasionType;

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public string itemID { get{ return _itemID; } set{ _itemID = value; } }
	public string itemName { get{ return _itemName; } set{ _itemName = value; } }
	public string itemDesc { get{ return _itemDesc; } set{ _itemDesc = value; } }
	public string iconName { get{ return _iconName; } set{ _iconName = value; } }
	public int price { get{ return _price; } set{ _price = value; } }
	public string option { get{ return _option; } set{ _option = value; } }
	public E_ItemType itemType { get{ return _itemType; } set{ _itemType = value; } }
	public E_ItemKindType itemKindType { get{ return _itemKindType; } set{ _itemKindType = value; } }
	public bool isConsume { get{ return _isConsume; } set{ _isConsume = value; } }
	public E_ScopeType scopeType { get{ return _scopeType; } set{ _scopeType = value; } }
	public E_OccasionType occasionType { get{ return _occasionType; } set{ _occasionType = value; } }

	public DB_Item() {}
	public DB_Item( DB_Item rho )
	{
		itemID = rho.itemID;
		itemName = rho.itemName;
		itemDesc = rho.itemDesc;
		iconName = rho.iconName;
		price = rho.price;
		option = rho.option;
		itemType = rho.itemType;
		itemKindType = rho.itemKindType;
		isConsume = rho.isConsume;
		scopeType = rho.scopeType;
		occasionType = rho.occasionType;
	}

	public uint GetSize()
	{
		uint size = 0;
		size += BinaryCodec.Size(itemID);
		size += BinaryCodec.SizeUnicodeString(itemName);
		size += BinaryCodec.SizeUnicodeString(itemDesc);
		size += BinaryCodec.Size(iconName);
		size += 4;	//	price
		size += BinaryCodec.Size(option);
		size += 4;
		size += 4;
		size += 1;	//	isConsume
		size += 4;
		size += 4;
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		if( !BinaryCodec.Encode( encoder, _itemID ) ) return false;
		if( !BinaryCodec.EncodeUnicodeString( encoder, _itemName ) ) return false;
		if( !BinaryCodec.EncodeUnicodeString( encoder, _itemDesc ) ) return false;
		if( !BinaryCodec.Encode( encoder, _iconName ) ) return false;
		if( !BinaryCodec.Encode( encoder, _price ) ) return false;
		if( !BinaryCodec.Encode( encoder, _option ) ) return false;
		{
			int enumValue = (int)itemType;
			if( !BinaryCodec.Encode( encoder, enumValue ) ) return false;
		}
		{
			int enumValue = (int)itemKindType;
			if( !BinaryCodec.Encode( encoder, enumValue ) ) return false;
		}
		if( !BinaryCodec.Encode( encoder, _isConsume ) ) return false;
		{
			int enumValue = (int)scopeType;
			if( !BinaryCodec.Encode( encoder, enumValue ) ) return false;
		}
		{
			int enumValue = (int)occasionType;
			if( !BinaryCodec.Encode( encoder, enumValue ) ) return false;
		}
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		if( !BinaryCodec.Decode( decoder, out _itemID ) ) return false;
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _itemName ) ) return false;
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _itemDesc ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _iconName ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _price ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _option ) ) return false;
		{
			int enumValue = 0;
			if( !BinaryCodec.Decode( decoder, out enumValue ) ) return false;
			_itemType = (E_ItemType)enumValue;
		}
		{
			int enumValue = 0;
			if( !BinaryCodec.Decode( decoder, out enumValue ) ) return false;
			_itemKindType = (E_ItemKindType)enumValue;
		}
		if( !BinaryCodec.Decode( decoder, out _isConsume ) ) return false;
		{
			int enumValue = 0;
			if( !BinaryCodec.Decode( decoder, out enumValue ) ) return false;
			_scopeType = (E_ScopeType)enumValue;
		}
		{
			int enumValue = 0;
			if( !BinaryCodec.Decode( decoder, out enumValue ) ) return false;
			_occasionType = (E_OccasionType)enumValue;
		}
		return true;
	}
}

public class DB_Weapon
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private string _itemID = string.Empty;
	private string _itemName = string.Empty;
	private string _itemDesc = string.Empty;
	private string _iconName = string.Empty;
	private int _price;
	private E_WeaponType _weaponType;
	private int _physicalDamage;
	private int _elementalDamage;
	private int _physicalCritChance;
	private int _elementalCritChance;
	private int _physicalRate;
	private int _elementalRate;
	private string _option = string.Empty;

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public string itemID { get{ return _itemID; } set{ _itemID = value; } }
	public string itemName { get{ return _itemName; } set{ _itemName = value; } }
	public string itemDesc { get{ return _itemDesc; } set{ _itemDesc = value; } }
	public string iconName { get{ return _iconName; } set{ _iconName = value; } }
	public int price { get{ return _price; } set{ _price = value; } }
	public E_WeaponType weaponType { get{ return _weaponType; } set{ _weaponType = value; } }
	public int physicalDamage { get{ return _physicalDamage; } set{ _physicalDamage = value; } }
	public int elementalDamage { get{ return _elementalDamage; } set{ _elementalDamage = value; } }
	public int physicalCritChance { get{ return _physicalCritChance; } set{ _physicalCritChance = value; } }
	public int elementalCritChance { get{ return _elementalCritChance; } set{ _elementalCritChance = value; } }
	public int physicalRate { get{ return _physicalRate; } set{ _physicalRate = value; } }
	public int elementalRate { get{ return _elementalRate; } set{ _elementalRate = value; } }
	public string option { get{ return _option; } set{ _option = value; } }

	public DB_Weapon() {}
	public DB_Weapon( DB_Weapon rho )
	{
		itemID = rho.itemID;
		itemName = rho.itemName;
		itemDesc = rho.itemDesc;
		iconName = rho.iconName;
		price = rho.price;
		weaponType = rho.weaponType;
		physicalDamage = rho.physicalDamage;
		elementalDamage = rho.elementalDamage;
		physicalCritChance = rho.physicalCritChance;
		elementalCritChance = rho.elementalCritChance;
		physicalRate = rho.physicalRate;
		elementalRate = rho.elementalRate;
		option = rho.option;
	}

	public uint GetSize()
	{
		uint size = 0;
		size += BinaryCodec.Size(itemID);
		size += BinaryCodec.SizeUnicodeString(itemName);
		size += BinaryCodec.SizeUnicodeString(itemDesc);
		size += BinaryCodec.Size(iconName);
		size += 4;	//	price
		size += 4;
		size += 4;	//	physicalDamage
		size += 4;	//	elementalDamage
		size += 4;	//	physicalCritChance
		size += 4;	//	elementalCritChance
		size += 4;	//	physicalRate
		size += 4;	//	elementalRate
		size += BinaryCodec.Size(option);
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		if( !BinaryCodec.Encode( encoder, _itemID ) ) return false;
		if( !BinaryCodec.EncodeUnicodeString( encoder, _itemName ) ) return false;
		if( !BinaryCodec.EncodeUnicodeString( encoder, _itemDesc ) ) return false;
		if( !BinaryCodec.Encode( encoder, _iconName ) ) return false;
		if( !BinaryCodec.Encode( encoder, _price ) ) return false;
		{
			int enumValue = (int)weaponType;
			if( !BinaryCodec.Encode( encoder, enumValue ) ) return false;
		}
		if( !BinaryCodec.Encode( encoder, _physicalDamage ) ) return false;
		if( !BinaryCodec.Encode( encoder, _elementalDamage ) ) return false;
		if( !BinaryCodec.Encode( encoder, _physicalCritChance ) ) return false;
		if( !BinaryCodec.Encode( encoder, _elementalCritChance ) ) return false;
		if( !BinaryCodec.Encode( encoder, _physicalRate ) ) return false;
		if( !BinaryCodec.Encode( encoder, _elementalRate ) ) return false;
		if( !BinaryCodec.Encode( encoder, _option ) ) return false;
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		if( !BinaryCodec.Decode( decoder, out _itemID ) ) return false;
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _itemName ) ) return false;
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _itemDesc ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _iconName ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _price ) ) return false;
		{
			int enumValue = 0;
			if( !BinaryCodec.Decode( decoder, out enumValue ) ) return false;
			_weaponType = (E_WeaponType)enumValue;
		}
		if( !BinaryCodec.Decode( decoder, out _physicalDamage ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _elementalDamage ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _physicalCritChance ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _elementalCritChance ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _physicalRate ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _elementalRate ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _option ) ) return false;
		return true;
	}
}

public class DB_Armor
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private string _itemID = string.Empty;
	private string _itemName = string.Empty;
	private string _itemDesc = string.Empty;
	private string _iconName = string.Empty;
	private int _price;
	private string _option = string.Empty;
	private E_ArmorType _armorType;
	private int _health;
	private int _energy;
	private int _healthRecover;
	private int _energyRecover;
	private int _physicalArmor;
	private int _elementalArmor;
	private int _physicalAvoid;
	private int _elementalAvoid;
	private int _physicalResistance;
	private int _elementalResistance;

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public string itemID { get{ return _itemID; } set{ _itemID = value; } }
	public string itemName { get{ return _itemName; } set{ _itemName = value; } }
	public string itemDesc { get{ return _itemDesc; } set{ _itemDesc = value; } }
	public string iconName { get{ return _iconName; } set{ _iconName = value; } }
	public int price { get{ return _price; } set{ _price = value; } }
	public string option { get{ return _option; } set{ _option = value; } }
	public E_ArmorType armorType { get{ return _armorType; } set{ _armorType = value; } }
	public int health { get{ return _health; } set{ _health = value; } }
	public int energy { get{ return _energy; } set{ _energy = value; } }
	public int healthRecover { get{ return _healthRecover; } set{ _healthRecover = value; } }
	public int energyRecover { get{ return _energyRecover; } set{ _energyRecover = value; } }
	public int physicalArmor { get{ return _physicalArmor; } set{ _physicalArmor = value; } }
	public int elementalArmor { get{ return _elementalArmor; } set{ _elementalArmor = value; } }
	public int physicalAvoid { get{ return _physicalAvoid; } set{ _physicalAvoid = value; } }
	public int elementalAvoid { get{ return _elementalAvoid; } set{ _elementalAvoid = value; } }
	public int physicalResistance { get{ return _physicalResistance; } set{ _physicalResistance = value; } }
	public int elementalResistance { get{ return _elementalResistance; } set{ _elementalResistance = value; } }

	public DB_Armor() {}
	public DB_Armor( DB_Armor rho )
	{
		itemID = rho.itemID;
		itemName = rho.itemName;
		itemDesc = rho.itemDesc;
		iconName = rho.iconName;
		price = rho.price;
		option = rho.option;
		armorType = rho.armorType;
		health = rho.health;
		energy = rho.energy;
		healthRecover = rho.healthRecover;
		energyRecover = rho.energyRecover;
		physicalArmor = rho.physicalArmor;
		elementalArmor = rho.elementalArmor;
		physicalAvoid = rho.physicalAvoid;
		elementalAvoid = rho.elementalAvoid;
		physicalResistance = rho.physicalResistance;
		elementalResistance = rho.elementalResistance;
	}

	public uint GetSize()
	{
		uint size = 0;
		size += BinaryCodec.Size(itemID);
		size += BinaryCodec.SizeUnicodeString(itemName);
		size += BinaryCodec.SizeUnicodeString(itemDesc);
		size += BinaryCodec.Size(iconName);
		size += 4;	//	price
		size += BinaryCodec.Size(option);
		size += 4;
		size += 4;	//	health
		size += 4;	//	energy
		size += 4;	//	healthRecover
		size += 4;	//	energyRecover
		size += 4;	//	physicalArmor
		size += 4;	//	elementalArmor
		size += 4;	//	physicalAvoid
		size += 4;	//	elementalAvoid
		size += 4;	//	physicalResistance
		size += 4;	//	elementalResistance
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		if( !BinaryCodec.Encode( encoder, _itemID ) ) return false;
		if( !BinaryCodec.EncodeUnicodeString( encoder, _itemName ) ) return false;
		if( !BinaryCodec.EncodeUnicodeString( encoder, _itemDesc ) ) return false;
		if( !BinaryCodec.Encode( encoder, _iconName ) ) return false;
		if( !BinaryCodec.Encode( encoder, _price ) ) return false;
		if( !BinaryCodec.Encode( encoder, _option ) ) return false;
		{
			int enumValue = (int)armorType;
			if( !BinaryCodec.Encode( encoder, enumValue ) ) return false;
		}
		if( !BinaryCodec.Encode( encoder, _health ) ) return false;
		if( !BinaryCodec.Encode( encoder, _energy ) ) return false;
		if( !BinaryCodec.Encode( encoder, _healthRecover ) ) return false;
		if( !BinaryCodec.Encode( encoder, _energyRecover ) ) return false;
		if( !BinaryCodec.Encode( encoder, _physicalArmor ) ) return false;
		if( !BinaryCodec.Encode( encoder, _elementalArmor ) ) return false;
		if( !BinaryCodec.Encode( encoder, _physicalAvoid ) ) return false;
		if( !BinaryCodec.Encode( encoder, _elementalAvoid ) ) return false;
		if( !BinaryCodec.Encode( encoder, _physicalResistance ) ) return false;
		if( !BinaryCodec.Encode( encoder, _elementalResistance ) ) return false;
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		if( !BinaryCodec.Decode( decoder, out _itemID ) ) return false;
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _itemName ) ) return false;
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _itemDesc ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _iconName ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _price ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _option ) ) return false;
		{
			int enumValue = 0;
			if( !BinaryCodec.Decode( decoder, out enumValue ) ) return false;
			_armorType = (E_ArmorType)enumValue;
		}
		if( !BinaryCodec.Decode( decoder, out _health ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _energy ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _healthRecover ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _energyRecover ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _physicalArmor ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _elementalArmor ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _physicalAvoid ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _elementalAvoid ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _physicalResistance ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _elementalResistance ) ) return false;
		return true;
	}
}

//-----------------------------------------------------------------------------
//	Database
//-----------------------------------------------------------------------------
public class DB_ItemList : IDatabase
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private List< DB_Item > _items = new List< DB_Item >();

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public List< DB_Item > items { get{ return _items; } set{ _items = value; } }

	public uint GetSize()
	{
		uint size = 0;
		size += sizeof(ushort);
		for(int i = 0; i < items.Count; ++i )
		{
			DB_Item item = items[i];
			size += item.GetSize();
		}
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		{
			ushort _size = (ushort)items.Count;
			if( !BinaryCodec.Encode( encoder, _size ) ) return false;
			for(int i = 0; i < items.Count; ++i)
			{
				DB_Item item = items[i];
				if( !item.Encode( encoder ) ) return false;
			}
		}
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		{
			ushort _size = 0;
			if( !BinaryCodec.Decode( decoder, out _size ) ) return false;
			items.Capacity = _size; 
			for( int i = 0; i < _size; ++i )
			{
				DB_Item item = new DB_Item();
				if( !item.Decode( decoder ) ) return false;
				items.Add( item );
			}
		}
		return true;
	}
}

public class DB_WeaponList : IDatabase
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private List< DB_Weapon > _items = new List< DB_Weapon >();

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public List< DB_Weapon > items { get{ return _items; } set{ _items = value; } }

	public uint GetSize()
	{
		uint size = 0;
		size += sizeof(ushort);
		for(int i = 0; i < items.Count; ++i )
		{
			DB_Weapon item = items[i];
			size += item.GetSize();
		}
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		{
			ushort _size = (ushort)items.Count;
			if( !BinaryCodec.Encode( encoder, _size ) ) return false;
			for(int i = 0; i < items.Count; ++i)
			{
				DB_Weapon item = items[i];
				if( !item.Encode( encoder ) ) return false;
			}
		}
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		{
			ushort _size = 0;
			if( !BinaryCodec.Decode( decoder, out _size ) ) return false;
			items.Capacity = _size; 
			for( int i = 0; i < _size; ++i )
			{
				DB_Weapon item = new DB_Weapon();
				if( !item.Decode( decoder ) ) return false;
				items.Add( item );
			}
		}
		return true;
	}
}

public class DB_ArmorList : IDatabase
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private List< DB_Armor > _items = new List< DB_Armor >();

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public List< DB_Armor > items { get{ return _items; } set{ _items = value; } }

	public uint GetSize()
	{
		uint size = 0;
		size += sizeof(ushort);
		for(int i = 0; i < items.Count; ++i )
		{
			DB_Armor item = items[i];
			size += item.GetSize();
		}
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		{
			ushort _size = (ushort)items.Count;
			if( !BinaryCodec.Encode( encoder, _size ) ) return false;
			for(int i = 0; i < items.Count; ++i)
			{
				DB_Armor item = items[i];
				if( !item.Encode( encoder ) ) return false;
			}
		}
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		{
			ushort _size = 0;
			if( !BinaryCodec.Decode( decoder, out _size ) ) return false;
			items.Capacity = _size; 
			for( int i = 0; i < _size; ++i )
			{
				DB_Armor item = new DB_Armor();
				if( !item.Decode( decoder ) ) return false;
				items.Add( item );
			}
		}
		return true;
	}
}

}; // namespace table.db
/* EOF */
