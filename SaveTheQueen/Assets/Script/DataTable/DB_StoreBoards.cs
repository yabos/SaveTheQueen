/*****************************************************************************
 *																			 *
 *								Protocol File								 *
 *																			 *
 *		File	: DB_StoreBoards.cs
 *																			 *
 *		Desc	: Generated by Morpheus										 *
 *																			 *
 *****************************************************************************/
//-----------------------------------------------------------------------------
//	Include Files & Define
//-----------------------------------------------------------------------------
using System.Collections.Generic;


namespace table.db {

//-----------------------------------------------------------------------------
//	Packets
//-----------------------------------------------------------------------------
public class DB_EventBoard
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private int _id;
	private int _select;
	private string _text = string.Empty;
	private int _storysceneid;
	private int _storyindexid;

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public int id { get{ return _id; } set{ _id = value; } }
	public int select { get{ return _select; } set{ _select = value; } }
	public string text { get{ return _text; } set{ _text = value; } }
	public int storysceneid { get{ return _storysceneid; } set{ _storysceneid = value; } }
	public int storyindexid { get{ return _storyindexid; } set{ _storyindexid = value; } }

	public DB_EventBoard() {}
	public DB_EventBoard( DB_EventBoard rho )
	{
		id = rho.id;
		select = rho.select;
		text = rho.text;
		storysceneid = rho.storysceneid;
		storyindexid = rho.storyindexid;
	}

	public uint GetSize()
	{
		uint size = 0;
		size += 4;	//	id
		size += 4;	//	select
		size += BinaryCodec.SizeUnicodeString(text);
		size += 4;	//	storysceneid
		size += 4;	//	storyindexid
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		if( !BinaryCodec.Encode( encoder, _id ) ) return false;
		if( !BinaryCodec.Encode( encoder, _select ) ) return false;
		if( !BinaryCodec.EncodeUnicodeString( encoder, _text ) ) return false;
		if( !BinaryCodec.Encode( encoder, _storysceneid ) ) return false;
		if( !BinaryCodec.Encode( encoder, _storyindexid ) ) return false;
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		if( !BinaryCodec.Decode( decoder, out _id ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _select ) ) return false;
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _text ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _storysceneid ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _storyindexid ) ) return false;
		return true;
	}
}

public class DB_StoreBoard
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private int _scene;
	private int _index;
	private string _characterName = string.Empty;
	private string _text = string.Empty;
	private int _eventid;
	private int _nextsceneid;
	private bool _skip;
	private string _bg = string.Empty;
	private string _left_character = string.Empty;
	private string _right_character = string.Empty;
	private int _fontsize;
	private int _fonteffect;
	private string _bgm = string.Empty;
	private string _sound = string.Empty;

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public int scene { get{ return _scene; } set{ _scene = value; } }
	public int index { get{ return _index; } set{ _index = value; } }
	public string characterName { get{ return _characterName; } set{ _characterName = value; } }
	public string text { get{ return _text; } set{ _text = value; } }
	public int eventid { get{ return _eventid; } set{ _eventid = value; } }
	public int nextsceneid { get{ return _nextsceneid; } set{ _nextsceneid = value; } }
	public bool skip { get{ return _skip; } set{ _skip = value; } }
	public string bg { get{ return _bg; } set{ _bg = value; } }
	public string left_character { get{ return _left_character; } set{ _left_character = value; } }
	public string right_character { get{ return _right_character; } set{ _right_character = value; } }
	public int fontsize { get{ return _fontsize; } set{ _fontsize = value; } }
	public int fonteffect { get{ return _fonteffect; } set{ _fonteffect = value; } }
	public string bgm { get{ return _bgm; } set{ _bgm = value; } }
	public string sound { get{ return _sound; } set{ _sound = value; } }

	public DB_StoreBoard() {}
	public DB_StoreBoard( DB_StoreBoard rho )
	{
		scene = rho.scene;
		index = rho.index;
		characterName = rho.characterName;
		text = rho.text;
		eventid = rho.eventid;
		nextsceneid = rho.nextsceneid;
		skip = rho.skip;
		bg = rho.bg;
		left_character = rho.left_character;
		right_character = rho.right_character;
		fontsize = rho.fontsize;
		fonteffect = rho.fonteffect;
		bgm = rho.bgm;
		sound = rho.sound;
	}

	public uint GetSize()
	{
		uint size = 0;
		size += 4;	//	scene
		size += 4;	//	index
		size += BinaryCodec.SizeUnicodeString(characterName);
		size += BinaryCodec.SizeUnicodeString(text);
		size += 4;	//	eventid
		size += 4;	//	nextsceneid
		size += 1;	//	skip
		size += BinaryCodec.Size(bg);
		size += BinaryCodec.Size(left_character);
		size += BinaryCodec.Size(right_character);
		size += 4;	//	fontsize
		size += 4;	//	fonteffect
		size += BinaryCodec.Size(bgm);
		size += BinaryCodec.Size(sound);
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		if( !BinaryCodec.Encode( encoder, _scene ) ) return false;
		if( !BinaryCodec.Encode( encoder, _index ) ) return false;
		if( !BinaryCodec.EncodeUnicodeString( encoder, _characterName ) ) return false;
		if( !BinaryCodec.EncodeUnicodeString( encoder, _text ) ) return false;
		if( !BinaryCodec.Encode( encoder, _eventid ) ) return false;
		if( !BinaryCodec.Encode( encoder, _nextsceneid ) ) return false;
		if( !BinaryCodec.Encode( encoder, _skip ) ) return false;
		if( !BinaryCodec.Encode( encoder, _bg ) ) return false;
		if( !BinaryCodec.Encode( encoder, _left_character ) ) return false;
		if( !BinaryCodec.Encode( encoder, _right_character ) ) return false;
		if( !BinaryCodec.Encode( encoder, _fontsize ) ) return false;
		if( !BinaryCodec.Encode( encoder, _fonteffect ) ) return false;
		if( !BinaryCodec.Encode( encoder, _bgm ) ) return false;
		if( !BinaryCodec.Encode( encoder, _sound ) ) return false;
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		if( !BinaryCodec.Decode( decoder, out _scene ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _index ) ) return false;
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _characterName ) ) return false;
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _text ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _eventid ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _nextsceneid ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _skip ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _bg ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _left_character ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _right_character ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _fontsize ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _fonteffect ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _bgm ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _sound ) ) return false;
		return true;
	}
}

//-----------------------------------------------------------------------------
//	Database
//-----------------------------------------------------------------------------
public class DB_EventBoardList : IDatabase
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private List< DB_EventBoard > _items = new List< DB_EventBoard >();

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public List< DB_EventBoard > items { get{ return _items; } set{ _items = value; } }

	public uint GetSize()
	{
		uint size = 0;
		size += sizeof(ushort);
		for(int i = 0; i < items.Count; ++i )
		{
			DB_EventBoard item = items[i];
			size += item.GetSize();
		}
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		{
			ushort _size = (ushort)items.Count;
			if( !BinaryCodec.Encode( encoder, _size ) ) return false;
			for(int i = 0; i < items.Count; ++i)
			{
				DB_EventBoard item = items[i];
				if( !item.Encode( encoder ) ) return false;
			}
		}
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		{
			ushort _size = 0;
			if( !BinaryCodec.Decode( decoder, out _size ) ) return false;
			items.Capacity = _size; 
			for( int i = 0; i < _size; ++i )
			{
				DB_EventBoard item = new DB_EventBoard();
				if( !item.Decode( decoder ) ) return false;
				items.Add( item );
			}
		}
		return true;
	}
}

public class DB_StoreBoardList : IDatabase
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private List< DB_StoreBoard > _chapter1 = new List< DB_StoreBoard >();

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public List< DB_StoreBoard > chapter1 { get{ return _chapter1; } set{ _chapter1 = value; } }

	public uint GetSize()
	{
		uint size = 0;
		size += sizeof(ushort);
		for(int i = 0; i < chapter1.Count; ++i )
		{
			DB_StoreBoard item = chapter1[i];
			size += item.GetSize();
		}
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		{
			ushort _size = (ushort)chapter1.Count;
			if( !BinaryCodec.Encode( encoder, _size ) ) return false;
			for(int i = 0; i < chapter1.Count; ++i)
			{
				DB_StoreBoard item = chapter1[i];
				if( !item.Encode( encoder ) ) return false;
			}
		}
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		{
			ushort _size = 0;
			if( !BinaryCodec.Decode( decoder, out _size ) ) return false;
			chapter1.Capacity = _size; 
			for( int i = 0; i < _size; ++i )
			{
				DB_StoreBoard item = new DB_StoreBoard();
				if( !item.Decode( decoder ) ) return false;
				chapter1.Add( item );
			}
		}
		return true;
	}
}

}; // namespace table.db
/* EOF */
