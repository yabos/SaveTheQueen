/*****************************************************************************
 *																			 *
 *								Protocol File								 *
 *																			 *
 *		File	: DB_StatusEffect.cs
 *																			 *
 *		Desc	: Generated by Morpheus										 *
 *																			 *
 *****************************************************************************/
//-----------------------------------------------------------------------------
//	Include Files & Define
//-----------------------------------------------------------------------------
using System.Collections.Generic;


namespace table.db {

//-----------------------------------------------------------------------------
//	Packets
//-----------------------------------------------------------------------------
public class DB_StatusEffect
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private string _statusEffectID = string.Empty;
	private E_StatusEffectType _statusEffectType;
	private string _iconName = string.Empty;
	private string _displayName = string.Empty;
	private string _description = string.Empty;
	private int _percent;
	private int _fix;
	private E_ElementType _elementType;
	private int _variance;
	private bool _isCritical;
	private int _criticalProbability;
	private string _vfxEffect = string.Empty;
	private string _soundEffect = string.Empty;
	private string _effectColor = string.Empty;

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public string statusEffectID { get{ return _statusEffectID; } set{ _statusEffectID = value; } }
	public E_StatusEffectType statusEffectType { get{ return _statusEffectType; } set{ _statusEffectType = value; } }
	public string iconName { get{ return _iconName; } set{ _iconName = value; } }
	public string displayName { get{ return _displayName; } set{ _displayName = value; } }
	public string description { get{ return _description; } set{ _description = value; } }
	public int percent { get{ return _percent; } set{ _percent = value; } }
	public int fix { get{ return _fix; } set{ _fix = value; } }
	public E_ElementType elementType { get{ return _elementType; } set{ _elementType = value; } }
	public int variance { get{ return _variance; } set{ _variance = value; } }
	public bool isCritical { get{ return _isCritical; } set{ _isCritical = value; } }
	public int criticalProbability { get{ return _criticalProbability; } set{ _criticalProbability = value; } }
	public string vfxEffect { get{ return _vfxEffect; } set{ _vfxEffect = value; } }
	public string soundEffect { get{ return _soundEffect; } set{ _soundEffect = value; } }
	public string effectColor { get{ return _effectColor; } set{ _effectColor = value; } }

	public DB_StatusEffect() {}
	public DB_StatusEffect( DB_StatusEffect rho )
	{
		statusEffectID = rho.statusEffectID;
		statusEffectType = rho.statusEffectType;
		iconName = rho.iconName;
		displayName = rho.displayName;
		description = rho.description;
		percent = rho.percent;
		fix = rho.fix;
		elementType = rho.elementType;
		variance = rho.variance;
		isCritical = rho.isCritical;
		criticalProbability = rho.criticalProbability;
		vfxEffect = rho.vfxEffect;
		soundEffect = rho.soundEffect;
		effectColor = rho.effectColor;
	}

	public uint GetSize()
	{
		uint size = 0;
		size += BinaryCodec.Size(statusEffectID);
		size += 4;
		size += BinaryCodec.Size(iconName);
		size += BinaryCodec.SizeUnicodeString(displayName);
		size += BinaryCodec.SizeUnicodeString(description);
		size += 4;	//	percent
		size += 4;	//	fix
		size += 4;
		size += 4;	//	variance
		size += 1;	//	isCritical
		size += 4;	//	criticalProbability
		size += BinaryCodec.Size(vfxEffect);
		size += BinaryCodec.Size(soundEffect);
		size += BinaryCodec.Size(effectColor);
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		if( !BinaryCodec.Encode( encoder, _statusEffectID ) ) return false;
		{
			int enumValue = (int)statusEffectType;
			if( !BinaryCodec.Encode( encoder, enumValue ) ) return false;
		}
		if( !BinaryCodec.Encode( encoder, _iconName ) ) return false;
		if( !BinaryCodec.EncodeUnicodeString( encoder, _displayName ) ) return false;
		if( !BinaryCodec.EncodeUnicodeString( encoder, _description ) ) return false;
		if( !BinaryCodec.Encode( encoder, _percent ) ) return false;
		if( !BinaryCodec.Encode( encoder, _fix ) ) return false;
		{
			int enumValue = (int)elementType;
			if( !BinaryCodec.Encode( encoder, enumValue ) ) return false;
		}
		if( !BinaryCodec.Encode( encoder, _variance ) ) return false;
		if( !BinaryCodec.Encode( encoder, _isCritical ) ) return false;
		if( !BinaryCodec.Encode( encoder, _criticalProbability ) ) return false;
		if( !BinaryCodec.Encode( encoder, _vfxEffect ) ) return false;
		if( !BinaryCodec.Encode( encoder, _soundEffect ) ) return false;
		if( !BinaryCodec.Encode( encoder, _effectColor ) ) return false;
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		if( !BinaryCodec.Decode( decoder, out _statusEffectID ) ) return false;
		{
			int enumValue = 0;
			if( !BinaryCodec.Decode( decoder, out enumValue ) ) return false;
			_statusEffectType = (E_StatusEffectType)enumValue;
		}
		if( !BinaryCodec.Decode( decoder, out _iconName ) ) return false;
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _displayName ) ) return false;
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _description ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _percent ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _fix ) ) return false;
		{
			int enumValue = 0;
			if( !BinaryCodec.Decode( decoder, out enumValue ) ) return false;
			_elementType = (E_ElementType)enumValue;
		}
		if( !BinaryCodec.Decode( decoder, out _variance ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _isCritical ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _criticalProbability ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _vfxEffect ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _soundEffect ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _effectColor ) ) return false;
		return true;
	}
}

//-----------------------------------------------------------------------------
//	Database
//-----------------------------------------------------------------------------
public class DB_StatusEffectList : IDatabase
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private List< DB_StatusEffect > _items = new List< DB_StatusEffect >();

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public List< DB_StatusEffect > items { get{ return _items; } set{ _items = value; } }

	public uint GetSize()
	{
		uint size = 0;
		size += sizeof(ushort);
		for(int i = 0; i < items.Count; ++i )
		{
			DB_StatusEffect item = items[i];
			size += item.GetSize();
		}
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		{
			ushort _size = (ushort)items.Count;
			if( !BinaryCodec.Encode( encoder, _size ) ) return false;
			for(int i = 0; i < items.Count; ++i)
			{
				DB_StatusEffect item = items[i];
				if( !item.Encode( encoder ) ) return false;
			}
		}
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		{
			ushort _size = 0;
			if( !BinaryCodec.Decode( decoder, out _size ) ) return false;
			items.Capacity = _size; 
			for( int i = 0; i < _size; ++i )
			{
				DB_StatusEffect item = new DB_StatusEffect();
				if( !item.Decode( decoder ) ) return false;
				items.Add( item );
			}
		}
		return true;
	}
}

}; // namespace table.db
/* EOF */
