/*****************************************************************************
 *																			 *
 *								Protocol File								 *
 *																			 *
 *		File	: DB_Character.cs
 *																			 *
 *		Desc	: Generated by Morpheus										 *
 *																			 *
 *****************************************************************************/
//-----------------------------------------------------------------------------
//	Include Files & Define
//-----------------------------------------------------------------------------
using System.Collections.Generic;


namespace table.db {

//-----------------------------------------------------------------------------
//	Enumerations
//-----------------------------------------------------------------------------
[System.Flags]
public enum E_CharacterType
{
	Pc,
	Monster,
	Npc,
}

//-----------------------------------------------------------------------------
//	Packets
//-----------------------------------------------------------------------------
public class DB_Character
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private int _ID;
	private string _Name = string.Empty;
	private E_CharacterType _CharacterType;
	private string _displayName = string.Empty;
	private string _spriteName = string.Empty;
	private int _default_str;
	private int _default_dex;
	private int _default_con;
	private int _default_int;
	private int _default_spr;
	private int _default_wis;
	private int _default_hp;
	private int _default_mp;
	private int _rewordXP;
	private int _rewordGold;
	private bool _isDrop;
	private string _dropList = string.Empty;

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public int ID { get{ return _ID; } set{ _ID = value; } }
	public string Name { get{ return _Name; } set{ _Name = value; } }
	public E_CharacterType CharacterType { get{ return _CharacterType; } set{ _CharacterType = value; } }
	public string displayName { get{ return _displayName; } set{ _displayName = value; } }
	public string spriteName { get{ return _spriteName; } set{ _spriteName = value; } }
	public int default_str { get{ return _default_str; } set{ _default_str = value; } }
	public int default_dex { get{ return _default_dex; } set{ _default_dex = value; } }
	public int default_con { get{ return _default_con; } set{ _default_con = value; } }
	public int default_int { get{ return _default_int; } set{ _default_int = value; } }
	public int default_spr { get{ return _default_spr; } set{ _default_spr = value; } }
	public int default_wis { get{ return _default_wis; } set{ _default_wis = value; } }
	public int default_hp { get{ return _default_hp; } set{ _default_hp = value; } }
	public int default_mp { get{ return _default_mp; } set{ _default_mp = value; } }
	public int rewordXP { get{ return _rewordXP; } set{ _rewordXP = value; } }
	public int rewordGold { get{ return _rewordGold; } set{ _rewordGold = value; } }
	public bool isDrop { get{ return _isDrop; } set{ _isDrop = value; } }
	public string dropList { get{ return _dropList; } set{ _dropList = value; } }

	public DB_Character() {}
	public DB_Character( DB_Character rho )
	{
		ID = rho.ID;
		Name = rho.Name;
		CharacterType = rho.CharacterType;
		displayName = rho.displayName;
		spriteName = rho.spriteName;
		default_str = rho.default_str;
		default_dex = rho.default_dex;
		default_con = rho.default_con;
		default_int = rho.default_int;
		default_spr = rho.default_spr;
		default_wis = rho.default_wis;
		default_hp = rho.default_hp;
		default_mp = rho.default_mp;
		rewordXP = rho.rewordXP;
		rewordGold = rho.rewordGold;
		isDrop = rho.isDrop;
		dropList = rho.dropList;
	}

	public uint GetSize()
	{
		uint size = 0;
		size += 4;	//	ID
		size += BinaryCodec.Size(Name);
		size += 4;
		size += BinaryCodec.SizeUnicodeString(displayName);
		size += BinaryCodec.Size(spriteName);
		size += 4;	//	default_str
		size += 4;	//	default_dex
		size += 4;	//	default_con
		size += 4;	//	default_int
		size += 4;	//	default_spr
		size += 4;	//	default_wis
		size += 4;	//	default_hp
		size += 4;	//	default_mp
		size += 4;	//	rewordXP
		size += 4;	//	rewordGold
		size += 1;	//	isDrop
		size += BinaryCodec.Size(dropList);
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		if( !BinaryCodec.Encode( encoder, _ID ) ) return false;
		if( !BinaryCodec.Encode( encoder, _Name ) ) return false;
		{
			int enumValue = (int)CharacterType;
			if( !BinaryCodec.Encode( encoder, enumValue ) ) return false;
		}
		if( !BinaryCodec.EncodeUnicodeString( encoder, _displayName ) ) return false;
		if( !BinaryCodec.Encode( encoder, _spriteName ) ) return false;
		if( !BinaryCodec.Encode( encoder, _default_str ) ) return false;
		if( !BinaryCodec.Encode( encoder, _default_dex ) ) return false;
		if( !BinaryCodec.Encode( encoder, _default_con ) ) return false;
		if( !BinaryCodec.Encode( encoder, _default_int ) ) return false;
		if( !BinaryCodec.Encode( encoder, _default_spr ) ) return false;
		if( !BinaryCodec.Encode( encoder, _default_wis ) ) return false;
		if( !BinaryCodec.Encode( encoder, _default_hp ) ) return false;
		if( !BinaryCodec.Encode( encoder, _default_mp ) ) return false;
		if( !BinaryCodec.Encode( encoder, _rewordXP ) ) return false;
		if( !BinaryCodec.Encode( encoder, _rewordGold ) ) return false;
		if( !BinaryCodec.Encode( encoder, _isDrop ) ) return false;
		if( !BinaryCodec.Encode( encoder, _dropList ) ) return false;
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		if( !BinaryCodec.Decode( decoder, out _ID ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _Name ) ) return false;
		{
			int enumValue = 0;
			if( !BinaryCodec.Decode( decoder, out enumValue ) ) return false;
			_CharacterType = (E_CharacterType)enumValue;
		}
		if( !BinaryCodec.DecodeUnicodeString( decoder, out _displayName ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _spriteName ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _default_str ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _default_dex ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _default_con ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _default_int ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _default_spr ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _default_wis ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _default_hp ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _default_mp ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _rewordXP ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _rewordGold ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _isDrop ) ) return false;
		if( !BinaryCodec.Decode( decoder, out _dropList ) ) return false;
		return true;
	}
}

//-----------------------------------------------------------------------------
//	Database
//-----------------------------------------------------------------------------
public class DB_CharacterList : IDatabase
{
	//-----------------------------------------------------------------------------
	//	Fields
	//-----------------------------------------------------------------------------
	private List< DB_Character > _items = new List< DB_Character >();

	//-----------------------------------------------------------------------------
	//	Properties
	//-----------------------------------------------------------------------------
	public List< DB_Character > items { get{ return _items; } set{ _items = value; } }

	public uint GetSize()
	{
		uint size = 0;
		size += sizeof(ushort);
		for(int i = 0; i < items.Count; ++i )
		{
			DB_Character item = items[i];
			size += item.GetSize();
		}
		return size;
	}

	public bool Encode( BinaryEncoder encoder )
	{
		{
			ushort _size = (ushort)items.Count;
			if( !BinaryCodec.Encode( encoder, _size ) ) return false;
			for(int i = 0; i < items.Count; ++i)
			{
				DB_Character item = items[i];
				if( !item.Encode( encoder ) ) return false;
			}
		}
		return true;
	}

	public bool Decode( BinaryDecoder decoder )
	{
		{
			ushort _size = 0;
			if( !BinaryCodec.Decode( decoder, out _size ) ) return false;
			items.Capacity = _size; 
			for( int i = 0; i < _size; ++i )
			{
				DB_Character item = new DB_Character();
				if( !item.Decode( decoder ) ) return false;
				items.Add( item );
			}
		}
		return true;
	}
}

}; // namespace table.db
/* EOF */
